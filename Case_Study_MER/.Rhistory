dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
n <- 10
nsim <- 1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim) {
x <- rnorm(n)
lotsa.medians[i] <- median(x)
}
length(lotsa.medians)
hist(lotsa.medians)
abline(v=0, col="red", lwd=2, lwt=3)
abline(v=0, col="red", lwd=2)
n <- 10
nsim <- 1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim) {
x <- rnorm(n)
lotsa.medians[i] <- mean(x)
}
length(lotsa.medians)
hist(lotsa.medians)
abline(v=0, col="red", lwd=2)
n2 <- 50
nsim2 <- 1000
lotsa.medians2 <- numeric(nsim)
for (i in 1:nsim2) {
x <- rnorm(n)
lotsa.medians2[i] <- mean(x)
}
hist(lotsa.medians2)
abline(v=0, col="red", lwd=2)
n <- 10
nsim <- 1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim) {
x <- rexp(n)
lotsa.medians[i] <- mean(x)
}
length(lotsa.medians)
hist(lotsa.medians)
abline(v=0, col="red", lwd=2)
n2 <- 50
nsim2 <- 1000
lotsa.medians2 <- numeric(nsim)
for (i in 1:nsim2) {
x <- rexp(n)
lotsa.medians2[i] <- mean(x)
}
hist(lotsa.medians2)
abline(v=0, col="red", lwd=2)
n2 <- 500
nsim2 <- 1000
lotsa.medians2 <- numeric(nsim)
for (i in 1:nsim2) {
x <- rexp(n)
lotsa.medians2[i] <- mean(x)
}
hist(lotsa.medians2)
n2 <- 5000
nsim2 <- 10000
lotsa.medians2 <- numeric(nsim)
for (i in 1:nsim2) {
x <- rexp(n)
lotsa.medians2[i] <- mean(x)
}
hist(lotsa.medians2)
n <- 10
nsim <- 1000
lotsa.means <- numeric(nsim)
for (i in 1:nsim) {
x <- rexp(n)
lotsa.medians[i] <- mean(x)
}
mean(lotsa.means)
n <- 10
nsim <- 1000
lotsa.means <- numeric(nsim)
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
mean(lotsa.means)
hist(lotsa.means)
rexp(10)
hist(rexp(10))
rm(list=ls())
n <- 10 # set sample size to 10
nsim <- 1000 # n simulations set to 1000
lotsa.means <- numeric(nsim)
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
mean(lotsa.means) #
hist(lotsa.means)
rm(list=ls()) # remove existing objects
n <- 50 # set sample size to 50
nsim <- 1000 # n simulations set to 1000
lotsa.means <- numeric(nsim) # create vector
for (i in 1:nsim) {
x <- rexp(n)
lotsa.means[i] <- mean(x)
}
mean(lotsa.means) # Approximately 1 (.9822)
hist(lotsa.means)
rm(list=ls())
swirl()
library(swirl)
swirl()
TRUE == FALSE
0
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(which(ints<0))
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(dat)]}, c(8, 4, 0))
info()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hi how are you")
submit()
submit()
mad_libs(c("Texas","pretty","car"))
submit
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class, simplify = TRUE)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_Shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- (flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals <- lapply(flags, length(unique))
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function (elem) elem[2])
head(flags)
0
rm(list=ls())
info()
bye()
rm(list=ls())
swirl()
sapply(flags, unique)
vapply(falgs, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
str(stackloss)
plot(stack.loss ~ Air.Flow, data = stackloss)
summary(stackloss)
---
title: "Unit2Videos"
author: "Manny Rosales"
date: "January 15, 2016"
output: html_document:
keep_md: true
---
# Introduction
This R markdown document give the summary, structure, and scatter plot of the stackloss data.
# Specifications
* Using R data stackloss
* Base function summary() for summary of data
* Base function str() for structure of data
---
title: "Unit2Videos"
author: "Manny Rosales"
date: "January 15, 2016"
output: html_document:
keep_md: true
---
# Introduction
This R markdown document give the summary, structure, and scatter plot of the stackloss data.
# Specifications
* Using R data stackloss
* Base function summary() for summary of data
* Base function str() for structure of data
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
class(stackloss)
summary(stackloss)
?stackloss
lm(stack.loss~Air.Flow, data = stackloss)
summary(lm(stack.loss~Air.Flow, data = stackloss))
sqrt(.8458)
qt(df = 7,p = .025)
qt(df = 5,p = .025)
qt(df = 31,p = .025)
qt(df = 33,p = .025)
getwd
getwd()
dire.create(paste0(getwd(),'/TestDirectory'))
dir.create(paste0(getwd(),'/TestDirectory'))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/RStudio")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/RStudio")
mydata=data.frame(A=randu(10))
mydata=data.frame(A=seq(1:10), B=seq(11:20))
mydata
write.table(mydata,"Test.csv", sep = ",", row.names = FALSE)
source(" https://dl.dropbox.com/u/12581470/code/Replicability_code/Fin_Trans_Replication_Journal/Data/public.fin.
msm.model.csv")
library(repmis)
finURL <- "http://bit.ly/14aS5qq"
source_data("https://raw.githubusercontent.com/christophergandrud/ Disproportionality_Data/master/Disproportionality.csv"")
source_data("https://raw.githubusercontent.com/christophergandrud/ Disproportionality_Data/master/Disproportionality.csv")
rm(list = ls())
library(repmis)
fileURL <- http://bit.ly/14aS5qq
fileURL <- http:/bit.ly/14aS5qq
??repmis
?source_data()
fileURL <- "http://bit.ly/14aS5qq"
FinRegulatorData <- source_data(fileURL, sep=",",header=TRUE)
DisData <- source_data("http://bit.ly/156oQ7a")
DisData
getwd()
source_data(fileURL, sep=",",header=TRUE)
getwd()
pf(q = 937, df1 = 3, df2 = 6)
pf(q = 1321, df1 = 2, df2 = 6)
143.3*.2041
29.25-29.24753
29.25+29.24753
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n = 10)
tail(plants,n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
rm(list=ls())
rm(list=ls())
library(swirl)
swirl()
0
info()
main()
swirl()
?sample()
0
info()
main()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
fips
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = .7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(n = 5, lambda = 10)
my_pois <- replicate(100,rpois(n = 5, lambda = 10))
my_pois <- replicate(100,rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
ts <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
rm(list=ls())
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
# This code is used to determine best model for Stats 2 Project 1 Question 1
# Manuel Rosales
# https://rpubs.com/Ludovicbenistant/HousePrice
# https://github.com/susanli2016/Data-Analysis-with-R/blob/master/Predict-House-Price.Rmd
# Load necessary packages
load.lib = c("olsrr","ggplot2","caret")
install.lib = load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib){
install.packages(lib,dependences=TRUE)
}
sapply(load.lib,require,character=TRUE)
# Function to generate summary dataframes for different models
# x = vector of names to append in a lm() statement
# y = initialized data frame to append results for each model
GenerateFitStats = function(x,y){
for(i in 1:length(x)){
my.formula = paste("SalePrice ~ GrLivArea +",x[i], sep=" ")
my.model = lm(data = model.df, my.formula)
R2 = summary(lm(data = model.df, my.formula))$r.squared
AdjR2 = summary(lm(data = model.df, my.formula))$adj.r.squared
AIC = ols_aic(my.model); SBC = ols_sbc(my.model);
modelstats.df = data.frame(Model=my.formula, R2=R2, AdjR2=AdjR2, AIC=AIC, SBC=SBC)
y = rbind(y,modelstats.df)
}
return(y)
}
# Set WD, should be the location of your cloned repository
data.Train = read.csv("train.csv")
# Determine Categorical and Continuous Variables
CatColumns = data.Train[,sapply(data.Train,is.factor)]
CatColNames = names(CatColumns)
# Set up data set of Id, GrLivArea, SalePrice to create model statistics for each categorical variable
model.df = data.Train[,c("Id","GrLivArea","SalePrice")]
model.df = cbind(model.df,CatColumns)
rawSummary = data.frame(Model=as.character(), R2=as.numeric(), AdjR2=numeric(), AIC=numeric(), SBC=numeric())
rawSummary.results = GenerateFitStats(CatColNames,rawSummary) # Call Function For Fit Stats
# Take log of Response to determine fit statistics
model.df$SalePrice = log(model.df$SalePrice)
logxSummary = data.frame(Model=as.character(), R2=as.numeric(), AdjR2=numeric(), AIC=numeric(), SBC=numeric())
logxSummary.results = GenerateFitStats(CatColNames,logxSummary) # Call Function For Fit Stats
# Take log of explanatory continuous varible to determine fit statistics
model.df$GrLivArea = log(model.df$GrLivArea)
logxlogySummary= data.frame(Model=as.character(), R2=as.numeric(), AdjR2=numeric(), AIC=numeric(), SBC=numeric())
logxlogySummary.results = GenerateFitStats(CatColNames,logxlogySummary) # Call Function For Fit Stats
# Review Best Raw Data Model
BestRawModel = lm(data = data.Train, SalePrice ~ GrLivArea + Neighborhood)
par(mfrow=c(2,2)); plot(BestRawModel); par(mfrow=c(1,1)); # Generate base R Residual plot on model (need transform)
# Review Best log(Y) Model
BestlogYModel = lm(data = data.Train, log(SalePrice) ~ GrLivArea + Neighborhood)
par(mfrow=c(2,2)); plot(BestlogYModel); par(mfrow=c(1,1)); # Generate base R Residual plot on model
# Review Best log(Y) and log(X) Model
BestlogYlogXModel = lm(data = data.Train, log(SalePrice) ~ log(GrLivArea) + Neighborhood)
par(mfrow=c(2,2)); plot(BestlogYlogXModel); par(mfrow=c(1,1)); # Generate base R Residual plot on model
# Generate pretty Residual Plots
olsrr::ols_dsrvsp_plot(BestRawModel)
olsrr::ols_dsrvsp_plot(BestlogYModel)
olsrr::ols_dsrvsp_plot(BestlogYlogXModel)
# CV Press Statistic on 10 cross validations
cvmodel1 = caret::train(SalePrice ~ GrLivArea + Neighborhood, data = data.Train, method = "lm",
trControl = trainControl(method = "cv", number = 10,verboseIter = TRUE),
na.action = na.omit)
sum(residuals(cvmodel1$finalModel)^2, na.rm=T) # CV Press = 2.407736e+12
cvmodel2 = caret::train(log(SalePrice) ~ GrLivArea + Neighborhood, data = data.Train, method = "lm",
trControl = trainControl(method = "cv", number = 10,verboseIter = TRUE),
na.action = na.omit)
sum(residuals(cvmodel2$finalModel)^2, na.rm=T) # CV Press = 56.1487
cvmodel3 = caret::train(log(SalePrice) ~ log(GrLivArea) + Neighborhood, data = data.Train, method = "lm",
trControl = trainControl(method = "cv", number = 10,verboseIter = TRUE),
na.action = na.omit)
sum(residuals(cvmodel3$finalModel)^2, na.rm=T) # CV Press = 53.69073
VIF = olsrr::ols_vif_tol(BestlogYlogXModel)  # Determine if VIF is appropriate
VIF # VIF for model is low
ScatterPlot = ggplot(data.Train,aes(y=log(SalePrice),x=log(GrLivArea),color=Neighborhood)) + geom_point() +
labs(title = "log(Sales Price) vs log(Living Area)", y="log of Sales Price ($)", x="log of Gross Living Area") +
theme(axis.title=element_text(size=14,face="bold"), title=element_text(size=14,face="bold"),
axis.text = element_text(size=10), legend.position = "bottom")
ScatterByFactor = ggplot(data.Train,aes(y=log(SalePrice),x=log(GrLivArea))) + geom_point() + geom_smooth(method = lm,se = TRUE) +
labs(title = "log(Sales Price) vs log(Living Area)", y="log of Sales Price ($)", x="log of Gross Living Area") +
theme(axis.title=element_text(size=14,face="bold"), title=element_text(size=14,face="bold"),
axis.text = element_text(size=10), legend.position = "bottom") + facet_wrap( ~ Neighborhood, ncol=5)
ScatterPlot
ScatterByFactor
data.Train = read.csv("train.csv")
getwd
getwd()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/DataScience@SMU/MSDS_DDS/DoingDDSGitHub/Case_Study_MER")
Sys.which("git")
